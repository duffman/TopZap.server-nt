'use strict';var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==='object'&&typeof Reflect.decorate==='function')r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r;};var __metadata=this&&this.__metadata||function(k,v){if(typeof Reflect==='object'&&typeof Reflect.metadata==='function')return Reflect.metadata(k,v);};Object.defineProperty(exports,'__esModule',{value:true});const inversify_1=require('inversify');const kernel_config_1=require('./kernel.config');const app_settings_1=require('./app/app.settings');const cli_logger_1=require('./app/cli/cli.logger');const cli_config_file_1=require('./app/cli/cli.config-file');let Bootstrap=class Bootstrap{constructor(){kernel_config_1.kernel.get('IServerService');}createSettings(config){let listenHost=config.listenHost?config.listenHost:'127.0.0.1';let listenPort=config.listenPort?config.port:8080;return new app_settings_1.AppSettings(listenHost,listenPort);}run(){let config=new cli_config_file_1.CliConfigFile();try{let configData=config.getConfig();let settings=this.createSettings(configData);return true;}catch(err){cli_logger_1.Logger.logError('Run Failed ::',err);return false;}}};Bootstrap=__decorate([inversify_1.injectable(),__metadata('design:paramtypes',[])],Bootstrap);exports.Bootstrap=Bootstrap;let bootstrap=new Bootstrap();