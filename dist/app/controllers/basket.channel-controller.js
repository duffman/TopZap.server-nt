'use strict';Object.defineProperty(exports,'__esModule',{value:true});const cli_logger_1=require('../cli/cli.logger');const channel_base_controller_1=require('../channels/channel.base-controller');const zap_message_types_1=require('../zap-ts-models/messages/zap-message-types');const message_types_1=require('../../lib/coldmind-igniter/messaging/message-types');const channel_config_1=require('../channels/channel-config');const channel_message_1=require('../channels/channel-message');const basket_session_service_1=require('../services/basket-session.service');class BasketChannelController extends channel_base_controller_1.ChannelBaseController{constructor(){super(channel_config_1.ChannelNames.Basket,'bids');this.basketSessService=new basket_session_service_1.BasketSessionService();}emitGetOffersInit(sessId,data){let mess=new channel_message_1.ChannelMessage(message_types_1.MessageType.Action,zap_message_types_1.ZapMessageType.GetOffersInit,data,sessId);cli_logger_1.Logger.logYellow('EMIT ON CHANNEL :: emitGetOffersInit ::',mess);this.emitMessage(mess);}emitVendorOffer(sessId,data){let mess=new channel_message_1.ChannelMessage(message_types_1.MessageType.Action,zap_message_types_1.ZapMessageType.VendorOffer,data,sessId);cli_logger_1.Logger.logYellow('EMIT ON CHANNEL :: emitVendorOffer ::',mess);this.emitMessage(mess);}emitOffersDone(sessId){let mess=new channel_message_1.ChannelMessage(message_types_1.MessageType.Action,zap_message_types_1.ZapMessageType.GetOffersDone,{},sessId);cli_logger_1.Logger.logYellow('EMIT ON CHANNEL :: emitOffersDone ::',mess);this.emitMessage(mess);}getSessionBasket(sessId){let sessBasket=this.basketSessService.getSessionBasket(sessId);return sessBasket;}}exports.BasketChannelController=BasketChannelController;