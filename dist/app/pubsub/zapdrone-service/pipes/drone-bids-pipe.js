'use strict';var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==='object'&&typeof Reflect.decorate==='function')r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r;};var __metadata=this&&this.__metadata||function(k,v){if(typeof Reflect==='object'&&typeof Reflect.metadata==='function')return Reflect.metadata(k,v);};Object.defineProperty(exports,'__esModule',{value:true});require('reflect-metadata');const inversify_1=require('inversify');const channel_config_1=require('../../scaledrone-service/channel-config');const drone_pipe_message_1=require('../drone-pipe-message');const zap_message_types_1=require('../../../zap-ts-models/messages/zap-message-types');let DroneBidsPipe=class DroneBidsPipe{constructor(){}startService(testMode=false){return new Promise((resolve,reject)=>{});}getBid(code,sessionId){let message=new drone_pipe_message_1.DronePipeMessage(zap_message_types_1.ZapMessageType.GetOffers,{code:code},sessionId);this.bidsDrone.emitMessage(message,channel_config_1.MessagePipes.GetBid);}onNewVendorBid(message){let vendorBid=message.data;console.log('onNewVendorBid ::',message);console.log('onNewVendorBid :: data ::',message.data);this.basketService.addToBasket(message.sessId,message.data).then(res=>{console.log(this.basketService.addToBasket,message);this.basketDrone.emitRaw(message.sessId,{type:'getBasket'});}).catch(err=>{console.log('onNewVendorBid :: error ::',err);});}};DroneBidsPipe=__decorate([inversify_1.injectable(),__metadata('design:paramtypes',[])],DroneBidsPipe);exports.DroneBidsPipe=DroneBidsPipe;