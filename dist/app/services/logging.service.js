'use strict';var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==='object'&&typeof Reflect.decorate==='function')r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r;};var __metadata=this&&this.__metadata||function(k,v){if(typeof Reflect==='object'&&typeof Reflect.metadata==='function')return Reflect.metadata(k,v);};Object.defineProperty(exports,'__esModule',{value:true});const log_db_ts_1=require('../../database/log-db-ts');const inversify_1=require('inversify');var LogSection;(function(LogSection){LogSection.Basket='basket';LogSection.Service='service';LogSection.Debug='debug';}(LogSection=exports.LogSection||(exports.LogSection={})));let LoggingService=class LoggingService{constructor(){this.dbService=new log_db_ts_1.LoggingDb();}clear(){return this.dbService.clearLog();}logService(prefix,value,code=-1){return this.dbService.doLog(LogSection.Service,prefix,value,code);}logBasket(prefix,value,code=-1){return this.dbService.doLog(LogSection.Basket,prefix,value,code);}log(prefix,section,value,code){return this.dbService.doLog(section,prefix,value,code);}};LoggingService=__decorate([inversify_1.injectable(),__metadata('design:paramtypes',[])],LoggingService);exports.LoggingService=LoggingService;