'use strict';Object.defineProperty(exports,'__esModule',{value:true});const cli_logger_1=require('../cli/cli.logger');const rest_utils_1=require('../utils/rest-utils');const basket_service_1=require('../services/basket.service');const analytics_db_1=require('../../database/analytics-db');const api_routes_1=require('../settings/api-routes');const drone_bids_pipe_1=require('../pubsub/zapdrone-service/pipes/drone-bids-pipe');class BidsApiController{constructor(){this.analyticsDb=new analytics_db_1.AnalyticsDb();console.log('BidsApiController --- XXX');this.basketService=new basket_service_1.BasketService();this.bidsPipe=new drone_bids_pipe_1.ServiceBidsPipe();}apiGetBasket(req,resp){console.log('apiGetBasket ::',req.session.id);this.basketService.getCurrentBasket(req.session.id).then(data=>{resp.json(data);}).catch(err=>{cli_logger_1.Logger.logError('apiGetBasket :: err ::',err);});}apiAddBasketItem(req,resp){let data=req.body;let code=data.code;console.log('BIDS :: BODY ::',data);console.log('BIDS :: CODE ::',code);let res=this.doGetBids(code,req.session.id);rest_utils_1.RestUtils.jsonSuccess(resp,res);}apiDeleteBasketItem(req,resp){let code=req.body.code;this.basketService.removeItem(code).then(res=>{}).catch(err=>{});}apiReviewBasket(req,resp){let data=req.body;let sessId=req.session.id;console.log('BASKET :: SESSION ID ::',sessId);this.basketService.getReviewData(sessId).then(res=>{console.log('apiReviewBasket ::',JSON.stringify(res));resp.json(res);}).catch(err=>{cli_logger_1.Logger.logError('apiReviewBasket :: err ::',err);});}initRoutes(routes){routes.post(api_routes_1.ApiRoutes.Basket.GET_BASKET,this.apiGetBasket.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_ADD,this.apiAddBasketItem.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_DELETE,this.apiDeleteBasketItem.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_REVIEW,this.apiReviewBasket.bind(this));}doGetBids(code,sessId){let result=true;try{cli_logger_1.Logger.log(`BasketChannelController :: doGetOffers`);this.bidsPipe.getBid(code,sessId);}catch(err){cli_logger_1.Logger.logError('doGetBids :: ERROR ::',err);result=false;}return result;}}exports.BidsApiController=BidsApiController;