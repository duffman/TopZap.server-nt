'use strict';var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==='object'&&typeof Reflect.decorate==='function')r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r;};var __metadata=this&&this.__metadata||function(k,v){if(typeof Reflect==='object'&&typeof Reflect.metadata==='function')return Reflect.metadata(k,v);};var __param=this&&this.__param||function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex);};};Object.defineProperty(exports,'__esModule',{value:true});require('reflect-metadata');const inversify_1=require('inversify');const cli_logger_1=require('../cli/cli.logger');const rest_utils_1=require('../utils/rest-utils');const basket_service_1=require('../services/basket.service');const analytics_db_1=require('../../database/analytics-db');const api_routes_1=require('../settings/api-routes');const bids_pubsub_1=require('../pubsub/bids-pubsub');const service_registry_1=require('../pubsub/service-registry');const pubsub_types_1=require('../../lib/topzap.pubsub-lib.git/pubsub-types');const session_basket_1=require('../zap-ts-models/session-basket');const basket_utils_1=require('../components/basket/basket-utils');let BidsApiController=class BidsApiController{constructor(basketService,bidsPubsub,serviceRegistry){this.basketService=basketService;this.bidsPubsub=bidsPubsub;this.serviceRegistry=serviceRegistry;this.analyticsDb=new analytics_db_1.AnalyticsDb();}getBasketExt(sessId,clearFlash=true){let resultBasket;let scope=this;console.log('******* getBasket ::');function clearSessionFlash(sessBasket){return new Promise((resolve,reject)=>{sessBasket.flash=new session_basket_1.SessionFlash();scope.basketService.saveBasketSession(sessId,sessBasket).then(data=>{cli_logger_1.Logger.logYellow('clearFlash :: SessionBasket ::',data);resolve(sessBasket);}).catch(err=>{cli_logger_1.Logger.logError('clearFlash :: error ::',err);reject(err);});});}function getBasket(){return new Promise((resolve,reject)=>{scope.basketService.getCurrentBasket(sessId).then(data=>{resolve(data);}).catch(err=>{cli_logger_1.Logger.logError('apiGetBasket :: err ::',err);reject(err);});});}async function execute(){resultBasket=await getBasket();if(clearFlash){resultBasket=await clearSessionFlash(resultBasket);}}return new Promise((resolve,reject)=>{execute().then(res=>{resolve(resultBasket);}).catch(err=>{cli_logger_1.Logger.logError('BidsApiController :: err ::',err);reject(err);});});}apiGetBasket(req,resp){let data=req.body;let zsid=data.zsid;let sessId=req.session.id;let remFlash=data.clearFlash;console.log('apiGetBasket :: BODY ::',data);console.log('apiGetBasket :: ZSID ::',zsid);console.log('apiGetBasket :: sessId ::',sessId);this.basketService.getCurrentBasket(zsid).then(data=>{if(remFlash){data.flash=new session_basket_1.SessionFlash();this.basketService.saveBasketSession(sessId,data).then(res=>{resp.json(data);}).catch(err=>{});}else{resp.json(data);}}).catch(err=>{cli_logger_1.Logger.logError('apiGetBasket :: err ::',err);});}apiGetBasketE(req,resp){let data=req.body;let zsid=data.zsid;let clearFlash=data.clearFlash;let sessId=req.session.id;console.log('apiGetBasket :: BODY ::',data);console.log('apiGetBasket :: ZSID ::',zsid);console.log('apiGetBasket :: sessId ::',sessId);this.basketService.getCurrentBasket(zsid).then(data=>{console.log('\xA4\xA4\xA4 BASKET BEFORE :: data ::');basket_utils_1.BasketUtils.showBasket(data);}).catch(err=>{console.log('\xA4\xA4\xA4 BASKET BEFORE :: error ::',err);});console.log(' ');console.log(' ');console.log(' ');this.getBasketExt(sessId).then(basket=>{console.log('\xA4\xA4\xA4 BASKET AFTER :: data ::');basket_utils_1.BasketUtils.showBasket(basket);resp.json(basket);}).catch(err=>{cli_logger_1.Logger.logError('apiGetBasket :: err ::',err);});}apiAddBasketItem(req,resp){let data=req.body;let code=data.code;let zsid=data.zsid;console.log('BIDS :: BODY ::',data);console.log('BIDS :: ZSID ::',zsid);console.log('BIDS :: CODE ::',code);let serviceCount=this.serviceRegistry.getServiceCount(pubsub_types_1.ServiceType.VendorPriceService);this.doGetBids(code,zsid).then(res=>{let payload={success:true,scount:serviceCount};resp.json(payload);}).catch(err=>{rest_utils_1.RestUtils.jsonSuccess(resp,false);});}apiDeleteBasketItem(req,resp){let data=req.body;let code=data.code;let zsid=data.zsid;let sessId=req.session.id;console.log('REMOVING ITEM :: BODY ::',data);console.log('REMOVING ITEM :: ZSID ::',zsid);console.log('REMOVING ITEM :: CODE ::',code);this.basketService.removeItem(code,zsid).then(res=>{rest_utils_1.RestUtils.jsonSuccess(resp,true);}).catch(err=>{rest_utils_1.RestUtils.jsonError(resp);});}apiReviewBasket(req,resp){let data=req.body;let zsid=data.zsid;let sessId=req.session.id;console.log('BASKET :: SESSION ID ::',sessId);console.log('BASKET :: ZSID ::',zsid);this.basketService.getReviewData(zsid).then(res=>{resp.json(res);}).catch(err=>{cli_logger_1.Logger.logError('apiReviewBasket :: err ::',err);});}remBasket(req,resp){let code=req.query.code;let sessId=req.query.sessId?req.query.sessId:req.session.id;console.log('Using sessId ::',sessId);console.log('Using code ::',code);this.basketService.getSessionBasket(sessId).then(basket=>{console.log('All items ::',basket.allItems);let res=JSON.stringify(basket);this.basketService.removeFromAll(basket,code);resp.json(basket);}).catch(err=>{console.log('Error getting sessBasket ::',err);resp.json(err);});}clearBasket(req,resp){let sessId=req.session.id;this.basketService.clearBasket(sessId).then(res=>{resp.json(res);}).catch(err=>{resp.json(err);});}initRoutes(routes){routes.post(api_routes_1.ApiRoutes.Basket.GET_BASKET,this.apiGetBasket.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_ADD,this.apiAddBasketItem.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_DELETE,this.apiDeleteBasketItem.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_REVIEW,this.apiReviewBasket.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_CLEAR,this.clearBasket.bind(this));routes.get('/brem',this.remBasket.bind(this));}doGetBids(code,sessId){let result=true;return new Promise((resolve,reject)=>{cli_logger_1.Logger.log(`BasketChannelController :: doGetOffers`);this.bidsPubsub.getBid(code,sessId).then(res=>{cli_logger_1.Logger.logPurple('BidsApiController :: doGetBids :: '+code+' ::',sessId);resolve(true);}).catch(err=>{cli_logger_1.Logger.logError('BidsApiController :: err ::',err);resolve(false);});});}};BidsApiController=__decorate([inversify_1.injectable(),__param(0,inversify_1.inject('IBasketService')),__param(1,inversify_1.inject('IPubsubController')),__param(2,inversify_1.inject('IServiceRegistry')),__metadata('design:paramtypes',[basket_service_1.BasketService,bids_pubsub_1.BidsPubsub,service_registry_1.ServiceRegistry])],BidsApiController);exports.BidsApiController=BidsApiController;