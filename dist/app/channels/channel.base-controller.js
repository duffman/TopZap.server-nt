'use strict';Object.defineProperty(exports,'__esModule',{value:true});const events_1=require('events');const channel_events_1=require('./channel-events');const Scaledrone=require('scaledrone-node');const channel_config_1=require('./channel-config');const zappy_app_settings_1=require('../zappy.app.settings');class ChannelBaseController{constructor(channelName,messagePipe){this.channelName=channelName;this.messagePipe=messagePipe;let config=new channel_config_1.ChannelConfig();let channelInfo=config.getChannelData(channelName);if(channelInfo===null){let error=new Error('Channel not found');throw error;}this.drone=new Scaledrone(channelInfo.channelID);this.channel=this.drone.subscribe(messagePipe);this.eventEmitter=new events_1.EventEmitter();this.attachEventHandlers();}log(prefix,data=null){data=data===null?'<EMPTY>':data;console.log('CHANNEL BASE ::'+prefix+'::',data);}attachEventHandlers(){let channel=this.channel;channel.on(channel_events_1.ChannelEvents.ChannelOpen,data=>{this.eventEmitter.emit(channel_events_1.ChannelEvents.ChannelOpen,data);});channel.on(channel_events_1.ChannelEvents.ChannelData,data=>{this.eventEmitter.emit(channel_events_1.ChannelEvents.ChannelData,data);});channel.on(channel_events_1.ChannelEvents.ChannelError,data=>{this.eventEmitter.emit(channel_events_1.ChannelEvents.ChannelError,data);});channel.on(channel_events_1.ChannelEvents.ChannelClose,data=>{this.eventEmitter.emit(channel_events_1.ChannelEvents.ChannelClose,data);});channel.on(channel_events_1.ChannelEvents.ChannelDisconnect,data=>{this.eventEmitter.emit(channel_events_1.ChannelEvents.ChannelDisconnect,data);});channel.on(channel_events_1.ChannelEvents.ChannelReconnect,data=>{this.eventEmitter.emit(channel_events_1.ChannelEvents.ChannelReconnect,data);});}destroy(){this.eventEmitter.removeAllListeners();}emitMessage(message,messagePipe=null){messagePipe=messagePipe!==null?messagePipe:this.messagePipe;this.drone.publish({room:this.messagePipe,message:message});}onChannelOpen(listener){this.eventEmitter.addListener(channel_events_1.ChannelEvents.ChannelOpen,listener);}onChannelData(listener){this.eventEmitter.addListener(channel_events_1.ChannelEvents.ChannelData,listener);}onChannelError(listener){this.eventEmitter.addListener(channel_events_1.ChannelEvents.ChannelError,listener);}onChannelClose(listener){this.eventEmitter.addListener(channel_events_1.ChannelEvents.ChannelClose,listener);}onChannelDisconnect(listener){this.eventEmitter.addListener(channel_events_1.ChannelEvents.ChannelDisconnect,listener);}onChannelReconnect(listener){this.eventEmitter.addListener(channel_events_1.ChannelEvents.ChannelReconnect,listener);}doGetOffers(sessId,mess){this.log('doGetOffers');let code=mess.data.code;console.log('### doGetBids ::',code);if(zappy_app_settings_1.Settings.Caching.UseCachedOffers){console.log('### doGetBids ::','UseCachedOffers');this.getCachedOffers(code,sessId);}else{console.log('### doGetBids ::','SEARCH SERVICE');this.emitGetOffersMessage(code,session.id);}}}exports.ChannelBaseController=ChannelBaseController;