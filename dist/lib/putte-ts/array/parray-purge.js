'use strict';Object.defineProperty(exports,'__esModule',{value:true});const pstr_utils_1=require('../../node-tsutils/pstr-utils');const pvar_utils_1=require('../../node-tsutils/pvar-utils');const pvar_types_1=require('../../node-tsutils/pvar-types');const parray_utils_1=require('../../node-tsutils/array/parray-utils');class PArrayPurge{arrPurgeNull(arr){let result=arr.filter(element=>{return element!=null;});return result;}static arrPurgeNullOrEmpty(arr){let result=arr.filter(element=>{return pstr_utils_1.PStrUtils.isEmpty(element);});return result;}static purge(arr,purgeNullArrays=true,purgeBool=false){function doPurge(value){let purge=false;let valType=pvar_utils_1.PVarUtils.getVarType(value);console.log('valType ::',pvar_types_1.PVarTypeToStr(valType));switch(valType){case pvar_types_1.PVarType.Null:purge=true;console.log('Null :: qualify ::',purge);break;case pvar_types_1.PVarType.Undefined:purge=true;console.log('Undefined :: qualify ::',purge);break;case pvar_types_1.PVarType.String:purge=value.length===0;console.log('String :: purge ::',purge);break;case pvar_types_1.PVarType.Number:purge=value<0;console.log('DBG::',value);console.log('Number :: qualify ::',purge);break;case pvar_types_1.PVarType.Bool:purge=purgeBool&&!value;console.log('Bool :: purge ::',purge);break;case pvar_types_1.PVarType.Array:let arrVal=value;purge=arrVal.length===0||purgeNullArrays&&!parray_utils_1.PArrayUtils.arrHaveChildValue(arrVal);console.log('\n###Array :: purge ::',purge);break;}return!purge;}let result=arr.filter(element=>{return doPurge(element);});return result;}}exports.PArrayPurge=PArrayPurge;